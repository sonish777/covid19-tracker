{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","isRed","cases","active","total","props","Card","className","onClick","CardContent","Typography","color","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","key","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","res","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","response","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f3d49491.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, isRed, cases, active, total, ...props }) {\r\n  return (\r\n    <Card\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n      onClick={props.onClick}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n// DRAW circles on the map with interactive tooltip\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      key={country.country}\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{\r\n              backgroundImage: `url(${country.countryInfo.flag})`,\r\n            }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      <table>\r\n        <tbody>\r\n          {countries.map(({ country, cases }) => (\r\n            <tr key={country}>\r\n              <td>{country}</td>\r\n              <td>\r\n                <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  const buildChartData = (data, casesType = \"cases\") => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n      if (lastDataPoint) {\r\n        const newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint,\r\n        };\r\n        chartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          const chartData = buildChartData(data, casesType);\r\n          //   console.log(chartData);\r\n          setData(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import {\n  Card,\n  CardContent,\n  FormControl,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport LineGraph from \"./LineGraph\";\nimport { prettyPrintStat, sortData } from \"./util\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((res) => res.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapZoom(4);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem key={country.value} value={country.value}>\n                  {country.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronovius Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n\n        <Map\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n          casesType={casesType}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}